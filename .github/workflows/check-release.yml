name: Check for New Release and Update Dockerfile

on:
  # schedule:
  #   - cron: '0 * * * *' # Execute every hour
  workflow_dispatch:
  push:
    branches:
      - EC-340-action-update-dockerfile

jobs:
  check-release:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        name: Checkout
    
      - name: Get latest release from another repo
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: 'actions',
              repo: 'runner'
            });
            const releaseInfo = {
              tag_name: latestRelease.data.tag_name,
              sha: latestRelease.data.target_commitish,
            };
            console.log(JSON.stringify(releaseInfo));
            return JSON.stringify(releaseInfo);
      
      # Retrieve the SHA of the latest release for the linux/amd64 architecture.
      # To accomplish this, we fetch all versions and identify the 5th version, which corresponds to the latest release with that specific architecture.
      # Reference: https://docs.github.com/en/rest/packages/packages?apiVersion=2022-11-28#list-package-versions-for-a-package-owned-by-an-organization
      ## NOTE: The SHA obtained in this step differs from the previous one, as it represents the branch commit SHA used for change verification.

      - name: Get Docker image digests
        id: get_digests
        run: |
          digests=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /orgs/actions/packages/container/actions-runner/versions)
          name=$(echo "${digests}" | jq -r '.[4].name')
          echo $name
          echo "arch_sha_name=$name" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Define release outputs
        id: release_outputs
        run: |
          release_info="${{ steps.get_release.outputs.result }}"  
          tag_name=$(echo "$release_info" | jq -r '.tag_name')
          sha=$(echo "$release_info" | jq -r '.sha')

          echo "tag_name=$tag_name" >> "$GITHUB_OUTPUT"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"
      
      # Check if the release has changed
      # if release.json file exist and the current tag and sha are the same as the latest release, then no changes have been made
      # if release.json file does not exist or exist but the current tag and sha are different, then the release will be considered as changed

      - name: Check if release has changed
        id: check_release_changes
        run: |
          new_tag=${{ steps.release_outputs.outputs.tag_name }}
          new_sha=${{ steps.release_outputs.outputs.sha }}

          if [ -f release.json ]; then
            current_tag=$(jq -r '.current_tag' release.json)
            current_sha=$(jq -r '.current_sha' release.json)

            if [[ "$current_tag" == "$new_tag" && "$current_sha" == "$new_sha" ]]; then
              echo "No changes in release."
              echo "release_changed=false" >> "$GITHUB_OUTPUT"
            else
              echo "Release has changed."
              echo "release_changed=true" >> "$GITHUB_OUTPUT"
              # Update release.json
              jq -n --arg new_tag "$new_tag" --arg new_sha "$new_sha" \
                '{current_tag: $new_tag, current_sha: $new_sha}' > release.json
  
              cat release.json
            fi
  
          else
            echo "Release is changed, file release.json does not exist."
            echo "release_changed=true" >> "$GITHUB_OUTPUT"

            # Create release.json
            jq -n --arg new_tag "$new_tag" --arg new_sha "$new_sha" \
              '{current_tag: $new_tag, current_sha: $new_sha}' > release.json

            cat release.json
          fi

      - name: Get changelog file
        id: changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "Changelog file does not exist. Creating one..."
            touch CHANGELOG.md
          fi

      - name: Update Changelog
        if: steps.check_release_changes.outputs.release_changed == 'true'
        id: update_changelog
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changelogPath = 'CHANGELOG.md';
            const dockerImage = `docker pull ghcr.io/actions/runner:${{ steps.release_outputs.outputs.tag_name }}@sha256:${{ steps.release_outputs.outputs.sha }}`;
  
            const changelogEntry = `## ${{ steps.release_outputs.outputs.tag_name }}\n- Docker Image: \`${dockerImage}\`\n`;
  
            const changelogContent = fs.readFileSync(changelogPath, 'utf8');
            fs.writeFileSync(changelogPath, `${changelogEntry}\n${changelogContent}`);
    
      - name: Update Dockerfile
        if: steps.check_release_changes.outputs.release_changed == 'true'
        id: update_dockerfile
        run: |
          echo "Updating Dockerfile..."
          version_clean=$(echo "${{ steps.release_outputs.outputs.tag_name }}" | sed 's/^v//')

          # Construct the new FROM statement
          new_from="FROM ghcr.io/actions/actions-runner:$version_clean@${{ steps.get_digests.outputs.arch_sha_name }} AS base"
          
          # Replace the first line with the new FROM statement
          sed -i "1s|.*|$new_from|" Dockerfile

          echo "Dockerfile updated."

      - name: Set up Git
        if: steps.check_release_changes.outputs.release_changed == 'true'
        id: git_setup
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          echo "branch_name=update-release-to-${{ steps.release_outputs.outputs.tag_name }}" >> "$GITHUB_OUTPUT"

      - name: Create branch
        if: steps.check_release_changes.outputs.release_changed == 'true'
        run: |
          git checkout -b ${{ steps.git_setup.outputs.branch_name }}
          git add release.json
          git add Dockerfile
          git add CHANGELOG.md
          git commit -m "Update release to ${{ steps.release_outputs.outputs.tag_name }}"
          git push origin ${{ steps.git_setup.outputs.branch_name }}
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      # - name: Create PR
      #   if: steps.check_release_changes.outputs.release_changed == 'true'
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     commit-message: 'Update release to ${{ steps.release_outputs.outputs.tag_name }}'
      #     title: 'Update release to ${{ steps.release_outputs.outputs.tag_name }}'
      #     branch: ${{ steps.git_setup.outputs.branch_name }}
      #     base: main
      #   env:
      #     GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      # How to configure: https://github.com/ravsamhq/notify-slack-action
      # - name: Drift Notification
      #   if: ${{ always() && (env.SLACK_WEBHOOK_URL) && steps.check_release_changes.outputs.release_changed == 'true' }}
      #   uses: ravsamhq/notify-slack-action@2.3.0
      #   with:
      #     status: ${{ job.status }}
      #     notification_title: "New Release identified [${{ steps.release_outputs.outputs.tag_name }}]"
      #     message_format: |
      #       {emoji} *{workflow}* Release:
      #       - Tag: ${{ steps.release_outputs.outputs.tag_name }}
      #       - Branch SHA: ${{ steps.release_outputs.outputs.sha }}
      #       - Link: https://github.com/actions/runner/releases/tag/${{ steps.release_outputs.outputs.tag_name }}
      #     footer: "Linked Repo {repo_url}/tree/${{ steps.git_setup.outputs.branch_name }}"
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}